plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.2'
	id 'io.spring.dependency-management' version '1.1.2'
}

group = 'com.abacus'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

//tasks.named('test') {
//	useJUnitPlatform()
//}
/* Spring boot가 실행될 때 React 프로젝트를 먼저 build하고 SpringBoot 프로젝트 Build 결과에 포함시킨다는 내용 */

def reactAppDir = "$projectDir/src/main/webapp/reactapp"

sourceSets{
	main{
		resources {
			srcDirs = ["$projectDir/src/main/resources"]
		}
	}
}

processResources{
	dependsOn "copyReactFile"
}

task installReact(type: Exec){
	workingDir "$reactAppDir"
	inputs.dir "$reactAppDir"
	group = BasePlugin.BUILD_GROUP
	if(System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')){
		commandLine "npm.cmd", "audit", "fix"
		commandLine 'npm.cmd', 'install'
	} else{
		commandLine "npm", "audit", "fix"
		commandLine 'npm', 'install'
	}
}

task buildReact(type: Exec){
	dependsOn "installReact"
	workingDir "$reactAppDir"
	inputs.dir "$reactAppDir"
	group = BasePlugin.BUILD_GROUP
	if(System.getProperty('os.name').toLowerCase(Locale.ROOT).contains("windows")){
		commandLine "npm.cmd", "run-script", "build"
	} else{
		commandLine "npm", "run-script", "build"
	}
}

task copyReactFile(type: Copy){
	dependsOn "buildReact"
	from "$reactAppDir/build"
	into "$buildDir/resources/main/static"
}

/* gralde을 이용해 프로젝트를 build 하는 경우 task가 서로 의존 관계를 가지기 때문에 processresources를 기점으로
* installReact > buildReact > copyReactFile 순으로 실행됨 */